;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2020 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-3F44-37CB-25                      |
; |                             IDA PRO 7.5 SP3                             |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 70CCB19FFBF4B536050B781D765C27BEED6408DD05E1B441EE2BBB97D3119BB2
; Input MD5    : 9FF519E859F3637574F62533C5215324
; Input CRC32  : 5661DC77

; File Name   : C:\Users\mbks\Desktop\goodprogram\comparator\get_statistic\compiling_database_files\func.dll
; Format      : Portable executable for 80386 (PE)
; Imagebase   : 62500000
; Timestamp   : 56E72FD2 (Mon Mar 14 21:40:34 2016)
; Section 1. (virtual address 00001000)
; Virtual size                  : 00000BA4 (   2980.)
; Section size in file          : 00000C00 (   3072.)
; Offset to raw data for section: 00000400
; Flags 60500060: Text Data Executable Readable
; Alignment     : 16 bytes
; OS type         :  MS Windows
; Application type:  DLL 32bit

                .686p
                .mmx
                .model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_text           segment para public 'CODE' use32
                assume cs:_text
                ;org 62501000h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


sub_62501000    proc near               ; CODE XREF: DllEntryPoint+3C\u2193p
                                        ; DllEntryPoint+B2\u2193p

Block           = dword ptr -1Ch

                push    ebx
                sub     esp, 18h
                mov     edx, ds:Block
                test    edx, edx
                jz      short loc_62501047
                mov     eax, ds:dword_62505000
                lea     ebx, [eax-4]
                cmp     edx, ebx
                ja      short loc_62501035
                lea     esi, [esi+0]

loc_62501020:                           ; CODE XREF: sub_62501000+33\u2193j
                mov     eax, [ebx]
                test    eax, eax
                jz      short loc_6250102E
                call    eax
                mov     edx, ds:Block

loc_6250102E:                           ; CODE XREF: sub_62501000+24\u2191j
                sub     ebx, 4
                cmp     edx, ebx
                jbe     short loc_62501020

loc_62501035:                           ; CODE XREF: sub_62501000+18\u2191j
                mov     [esp+1Ch+Block], edx ; Block
                call    free
                mov     ds:Block, 0

loc_62501047:                           ; CODE XREF: sub_62501000+C\u2191j
                mov     [esp+1Ch+Block], 0 ; Stream
                call    fflush
                add     esp, 18h
                pop     ebx
                retn
sub_62501000    endp

; ---------------------------------------------------------------------------
                align 10h
; [000000D5 BYTES: COLLAPSED FUNCTION DllEntryPoint. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h

; =============== S U B R O U T I N E =======================================


sub_62501140    proc near               ; CODE XREF: sub_62501440-27\u2193p
                                        ; sub_62501B70+12\u2193p

var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
arg_0           = dword ptr  4

                sub     esp, 1Ch
                mov     eax, [esp+1Ch+arg_0]
                mov     [esp+1Ch+var_14], offset dword_62505000
                mov     [esp+1Ch+var_18], offset Block
                mov     [esp+1Ch+var_1C], eax
                call    __dllonexit
                test    eax, eax
                setz    al
                add     esp, 1Ch
                movzx   eax, al
                neg     eax
                retn
sub_62501140    endp

; ---------------------------------------------------------------------------
                align 10h
                sub     esp, 1Ch
                mov     eax, [esp+20h]
                mov     dword ptr [esp+8], offset dword_62505000
                mov     dword ptr [esp+4], offset Block
                mov     [esp], eax
                call    __dllonexit
                add     esp, 1Ch
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_625011A0    proc near               ; CODE XREF: sub_62501B70+6\u2193p
                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     dword ptr [esp], offset ModuleName ; "libgcc_s_dw2-1.dll"
                call    GetModuleHandleA
                mov     edx, 0
                sub     esp, 4
                test    eax, eax
                jz      short loc_625011D3
                mov     dword ptr [esp+4], offset ProcName ; "__register_frame_info"
                mov     [esp], eax      ; hModule
                call    GetProcAddress
                sub     esp, 8
                mov     edx, eax

loc_625011D3:                           ; CODE XREF: sub_625011A0+1C\u2191j
                test    edx, edx
                jz      short loc_625011E8
                mov     dword ptr [esp+4], offset dword_62505008
                mov     dword ptr [esp], offset dword_625040AC
                call    edx

loc_625011E8:                           ; CODE XREF: sub_625011A0+35\u2191j
                mov     eax, dword_62502004
                test    eax, eax
                jz      short locret_6250122B
                mov     dword ptr [esp], offset aLibgcj13Dll ; "libgcj-13.dll"
                call    GetModuleHandleA
                mov     edx, 0
                sub     esp, 4
                test    eax, eax
                jz      short loc_6250121E
                mov     dword ptr [esp+4], offset aJvRegisterclas ; "_Jv_RegisterClasses"
                mov     [esp], eax      ; hModule
                call    GetProcAddress
                sub     esp, 8
                mov     edx, eax

loc_6250121E:                           ; CODE XREF: sub_625011A0+67\u2191j
                test    edx, edx
                jz      short locret_6250122B
                mov     dword ptr [esp], offset dword_62502004
                call    edx

locret_6250122B:                        ; CODE XREF: sub_625011A0+4F\u2191j
                                        ; sub_625011A0+80\u2191j
                leave
                retn
sub_625011A0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_62501230    proc near               ; DATA XREF: sub_62501B70+B\u2193o
                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     dword ptr [esp], offset ModuleName ; "libgcc_s_dw2-1.dll"
                call    GetModuleHandleA
                mov     edx, 0
                sub     esp, 4
                test    eax, eax
                jz      short loc_62501263
                mov     dword ptr [esp+4], offset aDeregisterFram ; "__deregister_frame_info"
                mov     [esp], eax      ; hModule
                call    GetProcAddress
                sub     esp, 8
                mov     edx, eax

loc_62501263:                           ; CODE XREF: sub_62501230+1C\u2191j
                test    edx, edx
                jz      short locret_62501270
                mov     dword ptr [esp], offset dword_625040AC
                call    edx

locret_62501270:                        ; CODE XREF: sub_62501230+35\u2191j
                leave
                retn
sub_62501230    endp

; ---------------------------------------------------------------------------
                align 10h
; Exported entry   1. Func1

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public Func1
Func1           proc near
                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     dword ptr [esp], offset Buffer ; "Called Hello function from dll"
                call    puts
                leave
                retn
Func1           endp

; Exported entry   7. Func2

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public Func2
Func2           proc near
                push    ebp
                mov     ebp, esp
                jmp     esp
Func2           endp

; ---------------------------------------------------------------------------
                jmp     eax
; ---------------------------------------------------------------------------
                pop     eax
                pop     eax
                retn
; ---------------------------------------------------------------------------
                pop     ebp
                retn
; Exported entry   8. Func3

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public Func3
Func3           proc near
                push    ebp
                mov     ebp, esp
                jmp     esp
Func3           endp

; ---------------------------------------------------------------------------
                jmp     ecx
; ---------------------------------------------------------------------------
                pop     ebx
                pop     ebx
                retn
; ---------------------------------------------------------------------------
                pop     ebp
                retn
; Exported entry   9. Func4

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public Func4
Func4           proc near
                push    ebp
                mov     ebp, esp
                jmp     esp
Func4           endp

; ---------------------------------------------------------------------------
                jmp     ebx
; ---------------------------------------------------------------------------
                pop     ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                pop     ebp
                retn
; Exported entry  10. Func5

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public Func5
Func5           proc near
                push    ebp
                mov     ebp, esp
                jmp     esp
Func5           endp

; ---------------------------------------------------------------------------
                jmp     edi
; ---------------------------------------------------------------------------
                pop     ebx
                pop     ebx
                retn
; ---------------------------------------------------------------------------
                pop     ebp
                retn
; Exported entry  11. Func6

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public Func6
Func6           proc near
                push    ebp
                mov     ebp, esp
                jmp     esp
Func6           endp

; ---------------------------------------------------------------------------
                jmp     edx
; ---------------------------------------------------------------------------
                pop     ecx
                pop     edx
                retn
; ---------------------------------------------------------------------------
                pop     ebp
                retn
; Exported entry  12. Func7

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public Func7
Func7           proc near
                push    ebp
                mov     ebp, esp
                jmp     esp
Func7           endp

; ---------------------------------------------------------------------------
                jmp     esi
; ---------------------------------------------------------------------------
                pop     ecx
                pop     eax
                retn
; ---------------------------------------------------------------------------
                pop     ebp
                retn
; Exported entry  13. Func8

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public Func8
Func8           proc near
                push    ebp
                mov     ebp, esp
                jmp     esp
Func8           endp

; ---------------------------------------------------------------------------
                jmp     ebp
; ---------------------------------------------------------------------------
                pop     eax
                pop     edx
                retn
; ---------------------------------------------------------------------------
                pop     ebp
                retn
; Exported entry  14. Func9

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public Func9
Func9           proc near
                push    ebp
                mov     ebp, esp
                jmp     esp
Func9           endp

; ---------------------------------------------------------------------------
                jmp     esp
; ---------------------------------------------------------------------------
                jmp     dword ptr [esp-0Ch]
; ---------------------------------------------------------------------------
                pop     ecx
                pop     ecx
                retn
; ---------------------------------------------------------------------------
                pop     ebp
                retn
; Exported entry   2. Func10

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __cdecl Func10(char *Source)
                public Func10
Func10          proc near

Destination     = byte ptr -94h
Source          = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 0A8h
                mov     eax, [ebp+Source]
                mov     [esp+4], eax    ; Source
                lea     eax, [ebp+Destination]
                mov     [esp], eax      ; Destination
                call    strcpy
                leave
                retn
Func10          endp

; Exported entry   3. Func11

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __cdecl Func11(char *Source)
                public Func11
Func11          proc near

Destination     = byte ptr -44h
Source          = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 58h
                mov     eax, [ebp+Source]
                mov     [esp+4], eax    ; Source
                lea     eax, [ebp+Destination]
                mov     [esp], eax      ; Destination
                call    strcpy
                leave
                retn
Func11          endp

; Exported entry   4. Func12

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __cdecl Func12(int, char *Source)
                public Func12
Func12          proc near

Destination     = byte ptr -7D8h
arg_0           = dword ptr  8
Source          = dword ptr  0Ch

                push    ebp
                mov     ebp, esp
                sub     esp, 7E8h
                mov     eax, [ebp+Source]
                mov     [esp+4], eax    ; Source
                lea     eax, [ebp+Destination]
                mov     [esp], eax      ; Destination
                call    strcpy
                mov     eax, [ebp+arg_0]
                mov     [esp+4], eax
                mov     dword ptr [esp], offset Format ; "%s"
                call    printf
                leave
                retn
Func12          endp

; Exported entry   5. Func13

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __cdecl Func13(char *Source)
                public Func13
Func13          proc near

Destination     = byte ptr -7D8h
Source          = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 7E8h
                mov     eax, [ebp+Source]
                mov     [esp+4], eax    ; Source
                lea     eax, [ebp+Destination]
                mov     [esp], eax      ; Destination
                call    strcpy
                leave
                retn
Func13          endp

; Exported entry   6. Func14

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __cdecl Func14(char *Source)
                public Func14
Func14          proc near

Destination     = byte ptr -3F0h
Source          = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 408h
                mov     eax, [ebp+Source]
                mov     [esp+4], eax    ; Source
                lea     eax, [ebp+Destination]
                mov     [esp], eax      ; Destination
                call    strcpy
                leave
                retn
Func14          endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


; BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
_DllMain@12     proc near               ; CODE XREF: DllEntryPoint+22\u2191p
                                        ; DllEntryPoint+A6\u2191p

hinstDLL        = dword ptr  4
fdwReason       = dword ptr  8
lpvReserved     = dword ptr  0Ch

                mov     eax, 1
                retn    0Ch
_DllMain@12     endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_625013C0    proc near               ; DATA XREF: sub_62501440:loc_62501412\u2193o
                mov     eax, off_62502000
                mov     eax, [eax]
                test    eax, eax
                jz      short locret_625013EA
                sub     esp, 0Ch
                xchg    ax, ax

loc_625013D0:                           ; CODE XREF: sub_625013C0+25\u2193j
                call    eax
                mov     eax, off_62502000
                lea     edx, [eax+4]
                mov     eax, [eax+4]
                mov     off_62502000, edx
                test    eax, eax
                jnz     short loc_625013D0
                add     esp, 0Ch

locret_625013EA:                        ; CODE XREF: sub_625013C0+9\u2191j
                rep retn
sub_625013C0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_62501440

loc_625013F0:                           ; CODE XREF: sub_62501440+1A\u2193j
                push    ebx
                sub     esp, 18h
                mov     ebx, ds:dword_62501B90
                cmp     ebx, 0FFFFFFFFh
                jz      short loc_62501423

loc_625013FF:                           ; CODE XREF: sub_62501440-9\u2193j
                test    ebx, ebx
                jz      short loc_62501412

loc_62501403:                           ; CODE XREF: sub_62501440-30\u2193j
                call    ds:dword_62501B90[ebx*4]
                sub     ebx, 1
                lea     esi, [esi+0]
                jnz     short loc_62501403

loc_62501412:                           ; CODE XREF: sub_62501440-3F\u2191j
                mov     [esp+1Ch+var_1C], offset sub_625013C0
                call    sub_62501140
                add     esp, 18h
                pop     ebx
                retn
; ---------------------------------------------------------------------------

loc_62501423:                           ; CODE XREF: sub_62501440-43\u2191j
                xor     ebx, ebx
                jmp     short loc_62501429
; ---------------------------------------------------------------------------

loc_62501427:                           ; CODE XREF: sub_62501440-B\u2193j
                mov     ebx, eax

loc_62501429:                           ; CODE XREF: sub_62501440-1B\u2191j
                lea     eax, [ebx+1]
                mov     edx, ds:dword_62501B90[eax*4]
                test    edx, edx
                jnz     short loc_62501427
                jmp     short loc_625013FF
; END OF FUNCTION CHUNK FOR sub_62501440
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_62501440    proc near               ; CODE XREF: DllEntryPoint+92\u2191p

var_1C          = dword ptr -1Ch

; FUNCTION CHUNK AT 625013F0 SIZE 00000049 BYTES

                mov     ecx, ds:dword_62505020
                test    ecx, ecx
                jz      short loc_62501450
                rep retn
; ---------------------------------------------------------------------------
                align 10h

loc_62501450:                           ; CODE XREF: sub_62501440+8\u2191j
                mov     ds:dword_62505020, 1
                jmp     short loc_625013F0
sub_62501440    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


                public TlsCallback_1
TlsCallback_1   proc near               ; DATA XREF: .CRT:62508008\u2193o

var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                sub     esp, 1Ch
                mov     eax, [esp+1Ch+arg_4]
                test    eax, eax
                jz      short loc_62501480
                cmp     eax, 3
                jz      short loc_62501480
                mov     eax, 1
                add     esp, 1Ch
                retn    0Ch
; ---------------------------------------------------------------------------
                align 10h

loc_62501480:                           ; CODE XREF: TlsCallback_1+9\u2191j
                                        ; TlsCallback_1+E\u2191j
                mov     edx, [esp+1Ch+arg_8]
                mov     [esp+1Ch+var_18], eax
                mov     eax, [esp+1Ch+arg_0]
                mov     [esp+1Ch+var_14], edx
                mov     [esp+1Ch+var_1C], eax
                call    sub_625016F0
                mov     eax, 1
                add     esp, 1Ch
                retn    0Ch
TlsCallback_1   endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


                public TlsCallback_0
TlsCallback_0   proc near               ; CODE XREF: DllEntryPoint+88\u2191p
                                        ; DATA XREF: .rdata:off_62503088\u2193o ...

var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                push    esi
                push    ebx
                sub     esp, 14h
                cmp     ds:dword_6250505C, 2
                mov     eax, [esp+1Ch+arg_4]
                jz      short loc_625014CC
                mov     ds:dword_6250505C, 2

loc_625014CC:                           ; CODE XREF: TlsCallback_0+10\u2191j
                cmp     eax, 2
                jz      short loc_625014E3
                cmp     eax, 1
                jz      short loc_62501518

loc_625014D6:                           ; CODE XREF: TlsCallback_0+43\u2193j
                                        ; TlsCallback_0+84\u2193j
                add     esp, 14h
                mov     eax, 1
                pop     ebx
                pop     esi
                retn    0Ch
; ---------------------------------------------------------------------------

loc_625014E3:                           ; CODE XREF: TlsCallback_0+1F\u2191j
                mov     esi, offset dword_62508014
                sub     esi, offset dword_62508014
                sar     esi, 2
                test    esi, esi
                jle     short loc_625014D6
                xor     ebx, ebx

loc_625014F7:                           ; CODE XREF: TlsCallback_0+59\u2193j
                mov     eax, ds:dword_62508014[ebx*4]
                test    eax, eax
                jz      short loc_62501504
                call    eax ; dword_62508014

loc_62501504:                           ; CODE XREF: TlsCallback_0+50\u2191j
                add     ebx, 1
                cmp     ebx, esi
                jnz     short loc_625014F7
                add     esp, 14h
                mov     eax, 1
                pop     ebx
                pop     esi
                retn    0Ch
; ---------------------------------------------------------------------------

loc_62501518:                           ; CODE XREF: TlsCallback_0+24\u2191j
                mov     eax, [esp+1Ch+arg_8]
                mov     [esp+1Ch+var_18], 1
                mov     [esp+1Ch+var_14], eax
                mov     eax, [esp+1Ch+arg_0]
                mov     [esp+1Ch+var_1C], eax
                call    sub_625016F0
                jmp     short loc_625014D6
TlsCallback_0   endp

; ---------------------------------------------------------------------------
                align 10h
                xor     eax, eax
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_62501550    proc near               ; CODE XREF: sub_625016F0:loc_62501771\u2193p
                                        ; sub_625016F0+90\u2193p
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 10h
                mov     dword ptr [esp], offset CriticalSection ; lpCriticalSection
                call    EnterCriticalSection
                mov     ebx, ds:dword_62505034
                sub     esp, 4
                test    ebx, ebx
                jz      short loc_6250159C

loc_62501571:                           ; CODE XREF: sub_62501550+4A\u2193j
                mov     eax, [ebx]
                mov     [esp], eax      ; dwTlsIndex
                call    TlsGetValue
                sub     esp, 4
                mov     esi, eax
                call    GetLastError
                test    eax, eax
                jnz     short loc_62501595
                test    esi, esi
                jz      short loc_62501595
                mov     eax, [ebx+4]
                mov     [esp], esi
                call    eax

loc_62501595:                           ; CODE XREF: sub_62501550+37\u2191j
                                        ; sub_62501550+3B\u2191j
                mov     ebx, [ebx+8]
                test    ebx, ebx
                jnz     short loc_62501571

loc_6250159C:                           ; CODE XREF: sub_62501550+1F\u2191j
                mov     dword ptr [esp], offset CriticalSection ; lpCriticalSection
                call    LeaveCriticalSection
                sub     esp, 4
                lea     esp, [ebp-8]
                pop     ebx
                pop     esi
                pop     ebp
                retn
sub_62501550    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    esi
                xor     esi, esi
                push    ebx
                sub     esp, 10h
                mov     eax, ds:dword_62505038
                test    eax, eax
                jnz     short loc_625015E0

loc_625015D3:                           ; CODE XREF: .text:6250163F\u2193j
                lea     esp, [ebp-8]
                mov     eax, esi
                pop     ebx
                pop     esi
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

loc_625015E0:                           ; CODE XREF: .text:625015D1\u2191j
                mov     dword ptr [esp+4], 0Ch
                mov     dword ptr [esp], 1
                call    calloc
                test    eax, eax
                mov     ebx, eax
                jz      short loc_6250163A
                mov     eax, [ebp+8]
                mov     dword ptr [esp], offset CriticalSection
                mov     [ebx], eax
                mov     eax, [ebp+0Ch]
                mov     [ebx+4], eax
                call    EnterCriticalSection
                mov     eax, ds:dword_62505034
                mov     ds:dword_62505034, ebx
                mov     [ebx+8], eax
                sub     esp, 4
                mov     dword ptr [esp], offset CriticalSection
                call    LeaveCriticalSection
                mov     eax, esi
                sub     esp, 4
                lea     esp, [ebp-8]
                pop     ebx
                pop     esi
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_6250163A:                           ; CODE XREF: .text:625015F8\u2191j
                mov     esi, 0FFFFFFFFh
                jmp     short loc_625015D3
; ---------------------------------------------------------------------------
                jmp     short loc_62501650
; ---------------------------------------------------------------------------
                align 10h

loc_62501650:                           ; CODE XREF: .text:62501641\u2191j
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 14h
                mov     eax, ds:dword_62505038
                mov     ebx, [ebp+8]
                test    eax, eax
                jnz     short loc_62501670
                xor     eax, eax
                mov     ebx, [ebp-4]
                leave
                retn
; ---------------------------------------------------------------------------
                align 10h

loc_62501670:                           ; CODE XREF: .text:62501661\u2191j
                mov     dword ptr [esp], offset CriticalSection
                call    EnterCriticalSection
                mov     edx, ds:dword_62505034
                sub     esp, 4
                test    edx, edx
                jz      short loc_625016A0
                mov     eax, [edx]
                cmp     eax, ebx
                jnz     short loc_62501699
                jmp     short loc_625016D5
; ---------------------------------------------------------------------------

loc_62501691:                           ; CODE XREF: .text:6250169E\u2193j
                mov     ecx, [eax]
                cmp     ecx, ebx
                jz      short loc_625016B6
                mov     edx, eax

loc_62501699:                           ; CODE XREF: .text:6250168D\u2191j
                mov     eax, [edx+8]
                test    eax, eax
                jnz     short loc_62501691

loc_625016A0:                           ; CODE XREF: .text:62501687\u2191j
                mov     dword ptr [esp], offset CriticalSection
                call    LeaveCriticalSection
                sub     esp, 4

loc_625016AF:                           ; CODE XREF: .text:625016D3\u2193j
                xor     eax, eax
                mov     ebx, [ebp-4]
                leave
                retn
; ---------------------------------------------------------------------------

loc_625016B6:                           ; CODE XREF: .text:62501695\u2191j
                mov     ecx, [eax+8]
                mov     [edx+8], ecx

loc_625016BC:                           ; CODE XREF: .text:625016DF\u2193j
                mov     [esp], eax
                call    free
                mov     dword ptr [esp], offset CriticalSection
                call    LeaveCriticalSection
                sub     esp, 4
                jmp     short loc_625016AF
; ---------------------------------------------------------------------------

loc_625016D5:                           ; CODE XREF: .text:6250168F\u2191j
                mov     eax, [edx+8]
                mov     ds:dword_62505034, eax
                mov     eax, edx
                jmp     short loc_625016BC
; ---------------------------------------------------------------------------
                jmp     short sub_625016F0
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_625016F0    proc near               ; CODE XREF: TlsCallback_1+33\u2191p
                                        ; TlsCallback_0+7F\u2191p ...

arg_4           = dword ptr  0Ch

                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     eax, [ebp+arg_4]
                cmp     eax, 1
                jz      short loc_62501743
                jb      short loc_62501715
                cmp     eax, 3
                jnz     short loc_6250170E
                mov     eax, ds:dword_62505038
                test    eax, eax
                jnz     short loc_62501771

loc_6250170E:                           ; CODE XREF: sub_625016F0+13\u2191j
                                        ; sub_625016F0+36\u2193j ...
                mov     eax, 1
                leave
                retn
; ---------------------------------------------------------------------------

loc_62501715:                           ; CODE XREF: sub_625016F0+E\u2191j
                mov     eax, ds:dword_62505038
                test    eax, eax
                jnz     short loc_62501778

loc_6250171E:                           ; CODE XREF: sub_625016F0+95\u2193j
                mov     eax, ds:dword_62505038
                cmp     eax, 1
                jnz     short loc_6250170E
                mov     dword ptr [esp], offset CriticalSection ; lpCriticalSection
                mov     ds:dword_62505038, 0
                call    DeleteCriticalSection
                sub     esp, 4
                jmp     short loc_6250170E
; ---------------------------------------------------------------------------

loc_62501743:                           ; CODE XREF: sub_625016F0+C\u2191j
                mov     eax, ds:dword_62505038
                test    eax, eax
                jz      short loc_62501760

loc_6250174C:                           ; CODE XREF: sub_625016F0+7F\u2193j
                mov     ds:dword_62505038, 1
                mov     eax, 1
                leave
                retn
; ---------------------------------------------------------------------------
                align 10h

loc_62501760:                           ; CODE XREF: sub_625016F0+5A\u2191j
                mov     dword ptr [esp], offset CriticalSection ; lpCriticalSection
                call    InitializeCriticalSection
                sub     esp, 4
                jmp     short loc_6250174C
; ---------------------------------------------------------------------------

loc_62501771:                           ; CODE XREF: sub_625016F0+1C\u2191j
                call    sub_62501550
                jmp     short loc_6250170E
; ---------------------------------------------------------------------------

loc_62501778:                           ; CODE XREF: sub_625016F0+2C\u2191j
                nop
                lea     esi, [esi+0]
                call    sub_62501550
                jmp     short loc_6250171E
sub_625016F0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: noreturn

; void __cdecl __noreturn sub_62501790(char *Format, char ArgList)
sub_62501790    proc near               ; CODE XREF: sub_625017E0+DE\u2193p
                                        ; sub_625018D0+CA\u2193p ...

Buffer          = dword ptr -1Ch
ElementSize     = dword ptr -18h
ElementCount    = dword ptr -14h
Stream          = dword ptr -10h
Format          = dword ptr  4
ArgList         = byte ptr  8

                push    esi
                push    ebx
                sub     esp, 14h
                mov     eax, ds:_iob
                mov     [esp+1Ch+ElementCount], 17h ; ElementCount
                lea     esi, [esp+1Ch+ArgList]
                mov     [esp+1Ch+ElementSize], 1 ; ElementSize
                mov     [esp+1Ch+Buffer], offset aMingwRuntimeFa ; "Mingw runtime failure:\n"
                lea     ebx, [eax+40h]
                mov     [esp+1Ch+Stream], ebx ; Stream
                call    fwrite
                mov     eax, [esp+1Ch+Format]
                mov     [esp+1Ch+ElementCount], esi ; ArgList
                mov     [esp+1Ch+Buffer], ebx ; Stream
                mov     [esp+1Ch+ElementSize], eax ; Format
                call    vfprintf
                call    abort
sub_62501790    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __fastcall sub_625017E0(size_t Size, void *Src)
sub_625017E0    proc near               ; CODE XREF: sub_625018D0+102\u2193p
                                        ; sub_625018D0+15C\u2193p ...

var_40          = dword ptr -40h
lpflOldProtect  = dword ptr -3Ch
flOldProtect    = dword ptr -38h
Buffer          = _MEMORY_BASIC_INFORMATION ptr -34h

                push    ebp
                mov     ebp, esp
                push    edi
                mov     edi, ecx
                push    esi
                mov     esi, edx
                push    ebx
                mov     ebx, eax
                sub     esp, 4Ch
                lea     eax, [ebp+Buffer]
                mov     dword ptr [esp+8], 1Ch ; dwLength
                mov     [esp+4], eax    ; lpBuffer
                mov     [esp], ebx      ; lpAddress
                call    VirtualQuery
                sub     esp, 0Ch
                test    eax, eax
                jz      loc_625018AB
                mov     eax, [ebp+Buffer.Protect]
                cmp     eax, 4
                jnz     short loc_62501831

loc_62501819:                           ; CODE XREF: sub_625017E0+54\u2193j
                mov     [esp+8], edi    ; Size
                mov     [esp+4], esi    ; Src
                mov     [esp], ebx      ; void *
                call    memcpy

loc_62501829:                           ; CODE XREF: sub_625017E0+99\u2193j
                                        ; sub_625017E0+9E\u2193j
                lea     esp, [ebp-0Ch]
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_62501831:                           ; CODE XREF: sub_625017E0+37\u2191j
                cmp     eax, 40h ; '@'
                jz      short loc_62501819
                mov     eax, [ebp+Buffer.RegionSize]
                lea     edx, [ebp+flOldProtect]
                mov     [esp+0Ch], edx  ; lpflOldProtect
                mov     dword ptr [esp+8], 40h ; '@' ; flNewProtect
                mov     [ebp+lpflOldProtect], edx
                mov     [esp+4], eax    ; dwSize
                mov     eax, [ebp+Buffer.BaseAddress]
                mov     [esp], eax      ; lpAddress
                call    VirtualProtect
                mov     ecx, [ebp+Buffer.Protect]
                mov     [ebp+var_40], ecx
                sub     esp, 10h
                mov     [esp+8], edi    ; Size
                mov     [esp+4], esi    ; Src
                mov     [esp], ebx      ; void *
                call    memcpy
                mov     ecx, [ebp+var_40]
                cmp     ecx, 4
                jz      short loc_62501829
                cmp     ecx, 40h ; '@'
                jz      short loc_62501829
                mov     eax, [ebp+flOldProtect]
                mov     edx, [ebp+lpflOldProtect]
                mov     [esp+8], eax    ; flNewProtect
                mov     eax, [ebp+Buffer.RegionSize]
                mov     [esp+0Ch], edx  ; lpflOldProtect
                mov     [esp+4], eax    ; dwSize
                mov     eax, [ebp+Buffer.BaseAddress]
                mov     [esp], eax      ; lpAddress
                call    VirtualProtect
                sub     esp, 10h
                lea     esp, [ebp-0Ch]
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_625018AB:                           ; CODE XREF: sub_625017E0+2B\u2191j
                mov     [esp+8], ebx
                mov     dword ptr [esp+4], 1Ch ; ArgList
                mov     dword ptr [esp], offset aVirtualqueryFa ; "  VirtualQuery failed for %d bytes at a"...
                call    sub_62501790
sub_625017E0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_625018D0    proc near               ; CODE XREF: DllEntryPoint:loc_625010ED\u2191p

Format          = dword ptr -2Ch
ArgList         = byte ptr -28h
Src             = dword ptr -10h

                mov     eax, ds:dword_62505054
                test    eax, eax
                jz      short loc_625018E0

locret_625018D9:                        ; CODE XREF: sub_625018D0+27\u2193j
                retn
; ---------------------------------------------------------------------------
                align 10h

loc_625018E0:                           ; CODE XREF: sub_625018D0+7\u2191j
                mov     eax, offset dword_62503228
                sub     eax, offset dword_62503228
                cmp     eax, 7
                mov     ds:dword_62505054, 1
                jle     short locret_625018D9
                push    edi
                push    esi
                push    ebx
                sub     esp, 20h
                cmp     eax, 0Bh
                jle     loc_625019E6
                mov     esi, ds:dword_62503228
                test    esi, esi
                jnz     loc_625019A0
                mov     ebx, ds:dword_6250322C
                test    ebx, ebx
                jnz     loc_625019A0
                mov     ecx, ds:dword_62503230
                mov     ebx, offset dword_62503234
                test    ecx, ecx
                jz      loc_625019EB
                mov     ebx, offset dword_62503228

loc_6250193C:                           ; CODE XREF: sub_625018D0+126\u2193j
                mov     eax, [ebx+8]
                cmp     eax, 1
                jnz     loc_62501A91

loc_62501948:                           ; CODE XREF: sub_625018D0+161\u2193j
                                        ; sub_625018D0+194\u2193j ...
                add     ebx, 0Ch
                cmp     ebx, offset dword_62503228
                jnb     loc_625019DF
                movzx   edx, byte ptr [ebx+8]
                mov     esi, [ebx+4]
                mov     ecx, [ebx]
                cmp     edx, 10h
                lea     eax, [esi+62500000h]
                mov     edi, [ecx+62500000h]
                jz      loc_62501A00
                cmp     edx, 20h ; ' '
                jz      loc_62501A70
                cmp     edx, 8
                jz      loc_62501A36
                mov     dword ptr [esp+2Ch+ArgList], edx ; ArgList
                mov     [esp+2Ch+Format], offset aUnknownPseudoR ; "  Unknown pseudo relocation bit size %d"...
                mov     [esp+2Ch+Src], 0
                call    sub_62501790
; ---------------------------------------------------------------------------
                align 10h

loc_625019A0:                           ; CODE XREF: sub_625018D0+40\u2191j
                                        ; sub_625018D0+4E\u2191j
                mov     ebx, offset dword_62503228

loc_625019A5:                           ; CODE XREF: sub_625018D0+11F\u2193j
                                        ; sub_625018D0+12C\u2193j
                cmp     ebx, offset dword_62503228
                jnb     short loc_625019DF
                lea     esi, [esi+0]

loc_625019B0:                           ; CODE XREF: sub_625018D0+10D\u2193j
                mov     edx, [ebx+4]
                mov     ecx, 4          ; Size
                add     ebx, 8
                lea     eax, [edx+62500000h]
                mov     edx, [edx+62500000h]
                add     edx, [ebx-8]
                mov     [esp+2Ch+Src], edx
                lea     edx, [esp+2Ch+Src] ; Src
                call    sub_625017E0
                cmp     ebx, offset dword_62503228
                jb      short loc_625019B0

loc_625019DF:                           ; CODE XREF: sub_625018D0+81\u2191j
                                        ; sub_625018D0+DB\u2191j
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     edi
                retn
; ---------------------------------------------------------------------------

loc_625019E6:                           ; CODE XREF: sub_625018D0+32\u2191j
                mov     ebx, offset dword_62503228

loc_625019EB:                           ; CODE XREF: sub_625018D0+61\u2191j
                mov     edx, [ebx]
                test    edx, edx
                jnz     short loc_625019A5
                mov     eax, [ebx+4]
                test    eax, eax
                jz      loc_6250193C
                jmp     short loc_625019A5
; ---------------------------------------------------------------------------
                align 10h

loc_62501A00:                           ; CODE XREF: sub_625018D0+9F\u2191j
                movzx   esi, word ptr [esi+62500000h]
                test    si, si
                movzx   edx, si
                jns     short loc_62501A15
                or      edx, 0FFFF0000h

loc_62501A15:                           ; CODE XREF: sub_625018D0+13D\u2191j
                sub     edx, ecx
                mov     ecx, 2          ; Size
                sub     edx, 62500000h
                add     edx, edi
                mov     [esp+2Ch+Src], edx
                lea     edx, [esp+2Ch+Src] ; Src
                call    sub_625017E0
                jmp     loc_62501948
; ---------------------------------------------------------------------------

loc_62501A36:                           ; CODE XREF: sub_625018D0+B1\u2191j
                movzx   edx, byte ptr [eax]
                test    dl, dl
                movzx   esi, dl
                jns     short loc_62501A46
                or      esi, 0FFFFFF00h

loc_62501A46:                           ; CODE XREF: sub_625018D0+16E\u2191j
                sub     esi, 62500000h
                mov     edx, esi
                sub     edx, ecx
                mov     ecx, 1          ; Size
                add     edx, edi
                mov     [esp+2Ch+Src], edx
                lea     edx, [esp+2Ch+Src] ; Src
                call    sub_625017E0
                jmp     loc_62501948
; ---------------------------------------------------------------------------
                align 10h

loc_62501A70:                           ; CODE XREF: sub_625018D0+A8\u2191j
                add     ecx, 62500000h
                sub     edi, ecx
                mov     ecx, 4          ; Size
                add     edi, [eax]
                lea     edx, [esp+2Ch+Src] ; Src
                mov     [esp+2Ch+Src], edi
                call    sub_625017E0
                jmp     loc_62501948
; ---------------------------------------------------------------------------

loc_62501A91:                           ; CODE XREF: sub_625018D0+72\u2191j
                mov     dword ptr [esp+2Ch+ArgList], eax ; ArgList
                mov     [esp+2Ch+Format], offset aUnknownPseudoR_0 ; "  Unknown pseudo relocation protocol ve"...
                call    sub_62501790
sub_625018D0    endp

; ---------------------------------------------------------------------------
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 4
; [00000006 BYTES: COLLAPSED FUNCTION strcpy. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION puts. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 4
; [00000006 BYTES: COLLAPSED FUNCTION printf. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memcpy. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 4
; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fwrite. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 4
; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fflush. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 4
; [00000006 BYTES: COLLAPSED FUNCTION calloc. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION abort. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 4
; [00000006 BYTES: COLLAPSED FUNCTION _errno. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 4
; [00000006 BYTES: COLLAPSED FUNCTION VirtualQuery. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION VirtualProtect. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 4
; [00000006 BYTES: COLLAPSED FUNCTION TlsGetValue. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION LeaveCriticalSection. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 4
; [00000006 BYTES: COLLAPSED FUNCTION InitializeCriticalSection. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetProcAddress. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 4
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetLastError. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 4
; [00000006 BYTES: COLLAPSED FUNCTION EnterCriticalSection. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION DeleteCriticalSection. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_62501B70    proc near               ; DATA XREF: .text:62501B94\u2193o
                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                call    sub_625011A0
                mov     dword ptr [esp], offset sub_62501230
                call    sub_62501140
                leave
                retn
sub_62501B70    endp

; ---------------------------------------------------------------------------
                align 10h
dword_62501B90  dd 0FFFFFFFFh           ; DATA XREF: sub_62501440-4C\u2191r
                                        ; sub_62501440:loc_62501403\u2191r ...
                dd offset sub_62501B70
                dd 0
                dd 0FFFFFFFFh
dword_62501BA0  dd 18h dup(0)           ; DATA XREF: .data:off_62502000\u2193o
                dd 100h dup(?)
_text           ends

; Section 2. (virtual address 00002000)
; Virtual size                  : 00000008 (      8.)
; Section size in file          : 00000200 (    512.)
; Offset to raw data for section: 00001000
; Flags C0300040: Data Readable Writable
; Alignment     : 4 bytes
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_data           segment dword public 'DATA' use32
                assume cs:_data
                ;org 62502000h
off_62502000    dd offset dword_62501BA0
                                        ; DATA XREF: sub_625013C0\u2191r
                                        ; sub_625013C0+12\u2191r ...
dword_62502004  dd 0                    ; DATA XREF: sub_625011A0:loc_625011E8\u2191r
                                        ; sub_625011A0+82\u2191o
                align 1000h
_data           ends

; Section 3. (virtual address 00003000)
; Virtual size                  : 00000228 (    552.)
; Section size in file          : 00000400 (   1024.)
; Offset to raw data for section: 00001200
; Flags 40300040: Data Readable
; Alignment     : 4 bytes
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_rdata          segment dword public 'DATA' use32
                assume cs:_rdata
                ;org 62503000h
; const CHAR ModuleName[]
ModuleName      db 'libgcc_s_dw2-1.dll',0
                                        ; DATA XREF: sub_625011A0+6\u2191o
                                        ; sub_62501230+6\u2191o
; const CHAR ProcName[]
ProcName        db '__register_frame_info',0
                                        ; DATA XREF: sub_625011A0+1E\u2191o
; const CHAR aLibgcj13Dll[]
aLibgcj13Dll    db 'libgcj-13.dll',0    ; DATA XREF: sub_625011A0+51\u2191o
; const CHAR aJvRegisterclas[]
aJvRegisterclas db '_Jv_RegisterClasses',0
                                        ; DATA XREF: sub_625011A0+69\u2191o
; const CHAR aDeregisterFram[]
aDeregisterFram db '__deregister_frame_info',0
                                        ; DATA XREF: sub_62501230+1E\u2191o
                align 4
; const char Buffer[]
Buffer          db 'Called Hello function from dll',0
                                        ; DATA XREF: Func1+6\u2191o
; const char Format[]
Format          db '%s',0               ; DATA XREF: Func12+25\u2191o
                align 4
off_62503088    dd offset TlsCallback_0 ; DATA XREF: DllEntryPoint+70\u2191r
aMingwRuntimeFa db 'Mingw runtime failure:',0Ah,0
                                        ; DATA XREF: sub_62501790+1E\u2191o
; const char aVirtualqueryFa[]
aVirtualqueryFa db '  VirtualQuery failed for %d bytes at address %p',0
                                        ; DATA XREF: sub_625017E0+D7\u2191o
                align 4
; const char aUnknownPseudoR_0[]
aUnknownPseudoR_0 db '  Unknown pseudo relocation protocol version %d.',0Ah,0
                                        ; DATA XREF: sub_625018D0+1C5\u2191o
                align 4
; const char aUnknownPseudoR[]
aUnknownPseudoR db '  Unknown pseudo relocation bit size %d.',0Ah,0
                                        ; DATA XREF: sub_625018D0+BB\u2191o
                align 4
aGccGnu482      db 'GCC: (GNU) 4.8.2',0
                align 4
aGccGnu481      db 'GCC: (GNU) 4.8.1',0
                align 10h
aGccGnu481_0    db 'GCC: (GNU) 4.8.1',0
                align 4
aGccGnu482_0    db 'GCC: (GNU) 4.8.2',0
                align 4
aGccGnu482_1    db 'GCC: (GNU) 4.8.2',0
                align 4
aGccGnu482_2    db 'GCC: (GNU) 4.8.2',0
                align 10h
aGccGnu482_3    db 'GCC: (GNU) 4.8.2',0
                align 4
aGccGnu482_4    db 'GCC: (GNU) 4.8.2',0
                align 4
aGccGnu482_5    db 'GCC: (GNU) 4.8.2',0
                align 4
aGccGnu482_6    db 'GCC: (GNU) 4.8.2',0
                align 10h
aGccGnu481_1    db 'GCC: (GNU) 4.8.1',0
                align 4
aGccGnu481_2    db 'GCC: (GNU) 4.8.1',0
                align 4
dword_62503228  dd 0                    ; DATA XREF: sub_625018D0:loc_625018E0\u2191o
                                        ; sub_625018D0+15\u2191o ...
dword_6250322C  dd 0                    ; DATA XREF: sub_625018D0+46\u2191r
dword_62503230  dd 0                    ; DATA XREF: sub_625018D0+54\u2191r
dword_62503234  dd 73h dup(0)           ; DATA XREF: sub_625018D0+5A\u2191o
                align 1000h
_rdata          ends

; Section 4. (virtual address 00004000)
; Virtual size                  : 000005B8 (   1464.)
; Section size in file          : 00000600 (   1536.)
; Offset to raw data for section: 00001600
; Flags 40300040: Data Readable
; Alignment     : 4 bytes
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_eh_fram        segment dword public 'DATA' use32
                assume cs:_eh_fram
                ;org 62504000h
                dd 14h, 0
                dd 527A01h, 1087C01h, 4040C1Bh, 188h, 20h, 1Ch, 0FFFFCFE0h
                dd 58h, 80E4100h, 0E430283h, 0E520220h, 0EC34108h, 4, 3Ch
                dd 40h, 0FFFFD01Ch, 0D5h, 80E4100h, 0D420285h, 3874605h
                dd 5830486h, 41C30A7Eh, 41C741C6h, 4040CC5h, 6D020B46h
                dd 0C641C30Ah, 0C541C741h, 4304040Ch, 0Bh, 14h, 80h, 0FFFFD0BCh
                dd 2Dh, 200E4300h, 40E64h, 14h, 98h, 0FFFFD0D4h, 23h, 200E4300h
                dd 40E5Fh
dword_625040AC  dd 14h, 0               ; DATA XREF: sub_625011A0+3F\u2191o
                                        ; sub_62501230+37\u2191o
                dd 527A01h, 1087C01h, 4040C1Bh, 188h, 2 dup(1Ch), 0FFFFD0D4h
                dd 8Dh, 80E4100h, 0D420285h, 0C5890205h, 4040Ch, 1Ch, 3Ch
                dd 0FFFFD144h, 42h, 80E4100h, 0D420285h, 0CC57E05h, 404h
                dd 14h, 0
                dd 527A01h, 1087C01h, 4040C1Bh, 188h, 2 dup(1Ch), 0FFFFD15Ch
                dd 14h, 80E4100h, 0D420285h, 0CC55005h, 404h, 1Ch, 3Ch
                dd 0FFFFD150h, 0Ch, 80E4100h, 0D420285h, 0CC54805h, 404h
                dd 1Ch, 5Ch, 0FFFFD13Ch, 0Ch, 80E4100h, 0D420285h, 0CC54805h
                dd 404h, 1Ch, 7Ch, 0FFFFD128h, 0Ch, 80E4100h, 0D420285h
                dd 0CC54805h, 404h, 1Ch, 9Ch, 0FFFFD114h, 0Ch, 80E4100h
                dd 0D420285h, 0CC54805h, 404h, 1Ch, 0BCh, 0FFFFD100h, 0Ch
                dd 80E4100h, 0D420285h, 0CC54805h, 404h, 1Ch, 0DCh, 0FFFFD0ECh
                dd 0Ch, 80E4100h, 0D420285h, 0CC54805h, 404h, 1Ch, 0FCh
                dd 0FFFFD0D8h, 0Ch, 80E4100h, 0D420285h, 0CC54805h, 404h
                dd 1Ch, 11Ch, 0FFFFD0C4h, 10h, 80E4100h, 0D420285h, 0CC54C05h
                dd 404h, 1Ch, 13Ch, 0FFFFD0B4h, 20h, 80E4100h, 0D420285h
                dd 0CC55C05h, 404h, 1Ch, 15Ch, 0FFFFD0B4h, 1Ah, 80E4100h
                dd 0D420285h, 0CC55605h, 404h, 1Ch, 17Ch, 0FFFFD0AEh, 33h
                dd 80E4100h, 0D420285h, 0CC56F05h, 404h, 1Ch, 19Ch, 0FFFFD0C1h
                dd 20h, 80E4100h, 0D420285h, 0CC55C05h, 404h, 1Ch, 1BCh
                dd 0FFFFD0C1h, 20h, 80E4100h, 0D420285h, 0CC55C05h, 404h
                dd 14h, 0
                dd 527A01h, 1087C01h, 4040C1Bh, 188h, 10h, 1Ch, 0FFFFD0B4h
                dd 8, 0
                dd 14h, 0
                dd 527A01h, 1087C01h, 4040C1Bh, 188h, 14h, 1Ch, 0FFFFD098h
                dd 2Ch, 100E4E00h, 40E5Ch, 20h, 34h, 0FFFFD0B0h, 49h, 80E4100h
                dd 0E430283h, 0E0A6D20h, 0EC34108h, 0B4104h, 10h, 58h
                dd 0FFFFD0DCh, 1Ch, 0
                dd 14h, 0
                dd 527A01h, 1087C01h, 4040C1Bh, 188h, 2 dup(1Ch), 0FFFFD0D0h
                dd 43h, 200E4300h, 40E0A55h, 0E600B48h, 4, 38h, 3Ch, 0FFFFD100h
                dd 86h, 80E4100h, 0E410286h, 4303830Ch, 0A64200Eh, 0C3460C0Eh
                dd 0C641080Eh, 0B43040Eh, 0C0E0A6Bh, 80EC346h, 40EC641h
                dd 0B43h, 10h, 78h, 0FFFFD154h, 3, 0
                dd 14h, 0
                dd 527A01h, 1087C01h, 4040C1Bh, 188h, 24h, 1Ch, 0FFFFD138h
                dd 62h, 80E4100h, 0D420285h, 3864505h, 57020483h, 41C641C3h
                dd 4040CC5h, 34h, 44h, 0FFFFD180h, 81h, 80E4100h, 0D420285h
                dd 3864105h, 4F048346h, 0C641C30Ah, 40CC541h, 20B4504h
                dd 41C30A57h, 0CC541C6h, 0B410404h, 2Ch, 7Ch, 0FFFFD1D8h
                dd 91h, 80E4100h, 0D420285h, 3834405h, 0C3C50A52h, 4704040Ch
                dd 0A45020Bh, 40CC5C3h, 0B4104h, 28h, 0ACh, 0FFFFD248h
                dd 97h, 80E4100h, 0D420285h, 0C50A6105h, 4104040Ch, 0A47020Bh
                dd 4040CC5h, 0B44h, 14h, 0
                dd 527A01h, 1087C01h, 4040C1Bh, 188h, 2 dup(1Ch), 0FFFFD2A4h
                dd 4Ah, 80E4100h, 0E410286h, 4303830Ch, 200Eh, 2 dup(3Ch)
                dd 0FFFFD2D4h, 0E3h, 80E4100h, 0D420285h, 3874105h, 43048643h
                dd 43020583h, 0C641C30Ah, 0C541C741h, 4104040Ch, 0A76020Bh
                dd 41C641C3h, 0CC541C7h, 0B410404h, 34h, 7Ch, 0FFFFD384h
                dd 1D1h, 80E6A00h, 0E410287h, 4103860Ch, 483100Eh, 2300E43h
                dd 100E0AE3h, 0C0EC341h, 80EC641h, 40EC741h, 0B41h, 0
                dd 14h, 0
                dd 527A01h, 1087C01h, 4040C1Bh, 188h, 2 dup(1Ch), 0FFFFD5D0h
                dd 19h, 80E4100h, 0D420285h, 0CC55505h, 404h, 12h dup(0)
                align 1000h
_eh_fram        ends

; Section 5. (virtual address 00005000)
; Virtual size                  : 00000070 (    112.)
; Section size in file          : 00000000 (      0.)
; Offset to raw data for section: 00000000
; Flags C0300080: Bss Readable Writable
; Alignment     : 4 bytes
; ===========================================================================

; Segment type: Uninitialized
; Segment permissions: Read/Write
_bss            segment dword public 'BSS' use32
                assume cs:_bss
                ;org 62505000h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_62505000  dd ?                    ; DATA XREF: sub_62501000+E\u2191r
                                        ; DllEntryPoint+6B\u2191w ...
; void *Block
Block           dd ?                    ; DATA XREF: sub_62501000+4\u2191r
                                        ; sub_62501000+28\u2191r ...
dword_62505008  dd 6 dup(?)             ; DATA XREF: sub_625011A0+37\u2191o
dword_62505020  dd ?                    ; DATA XREF: sub_62501440\u2191r
                                        ; sub_62501440:loc_62501450\u2191w
                align 10h
TlsIndex        dd ?                    ; DATA XREF: .tls:TlsIndex_ptr\u2193o
dword_62505034  dd ?                    ; DATA XREF: sub_62501550+14\u2191r
                                        ; .text:62501611\u2191r ...
dword_62505038  dd ?                    ; DATA XREF: .text:625015CA\u2191r
                                        ; .text:62501657\u2191r ...
; struct _RTL_CRITICAL_SECTION CriticalSection
CriticalSection _RTL_CRITICAL_SECTION <?>
                                        ; DATA XREF: sub_62501550+8\u2191o
                                        ; sub_62501550:loc_6250159C\u2191o ...
dword_62505054  dd ?                    ; DATA XREF: sub_625018D0\u2191r
                                        ; sub_625018D0+1D\u2191w
                dd ?
dword_6250505C  dd ?                    ; DATA XREF: TlsCallback_0+5\u2191r
                                        ; TlsCallback_0+12\u2191w
                align 1000h
_bss            ends

;
; Imports from KERNEL32.dll
;
; Section 7. (virtual address 00007000)
; Virtual size                  : 000002DC (    732.)
; Section size in file          : 00000400 (   1024.)
; Offset to raw data for section: 00001E00
; Flags C0300040: Data Readable Writable
; Alignment     : 4 bytes
; ===========================================================================

; Segment type: Externs
; _idata
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
                extrn __imp_DeleteCriticalSection:dword
                                        ; DATA XREF: DeleteCriticalSection\u2191r
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
                extrn __imp_EnterCriticalSection:dword
                                        ; DATA XREF: EnterCriticalSection\u2191r
; DWORD __stdcall GetLastError()
                extrn __imp_GetLastError:dword
                                        ; DATA XREF: GetLastError\u2191r
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
                extrn __imp_GetModuleHandleA:dword
                                        ; DATA XREF: GetModuleHandleA\u2191r
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
                extrn __imp_GetProcAddress:dword
                                        ; DATA XREF: GetProcAddress\u2191r
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
                extrn __imp_InitializeCriticalSection:dword
                                        ; DATA XREF: InitializeCriticalSection\u2191r
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
                extrn __imp_LeaveCriticalSection:dword
                                        ; DATA XREF: LeaveCriticalSection\u2191r
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
                extrn __imp_TlsGetValue:dword
                                        ; DATA XREF: TlsGetValue\u2191r
; BOOL __stdcall VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect)
                extrn __imp_VirtualProtect:dword
                                        ; DATA XREF: VirtualProtect\u2191r
; SIZE_T __stdcall VirtualQuery(LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength)
                extrn __imp_VirtualQuery:dword
                                        ; DATA XREF: VirtualQuery\u2191r

;
; Imports from msvcrt.dll
;
                extrn __imp___dllonexit:dword
                                        ; DATA XREF: __dllonexit\u2191r
; int *__cdecl _errno()
                extrn __imp__errno:dword ; DATA XREF: _errno\u2191r
; FILE iob[]
                extrn _iob:dword        ; DATA XREF: sub_62501790+5\u2191r
; void __cdecl __noreturn abort()
                extrn __imp_abort:dword ; DATA XREF: abort\u2191r
; void *__cdecl calloc(size_t Count, size_t Size)
                extrn __imp_calloc:dword ; DATA XREF: calloc\u2191r
; int __cdecl fflush(FILE *Stream)
                extrn __imp_fflush:dword ; DATA XREF: fflush\u2191r
; void __cdecl free(void *Block)
                extrn __imp_free:dword  ; DATA XREF: free\u2191r
; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
                extrn __imp_fwrite:dword ; DATA XREF: fwrite\u2191r
; void *__cdecl malloc(size_t Size)
                extrn __imp_malloc:dword ; DATA XREF: malloc\u2191r
; void *__cdecl memcpy(void *, const void *Src, size_t Size)
                extrn __imp_memcpy:dword ; DATA XREF: memcpy\u2191r
; int printf(const char *const Format, ...)
                extrn __imp_printf:dword ; DATA XREF: printf\u2191r
; int __cdecl puts(const char *Buffer)
                extrn __imp_puts:dword  ; DATA XREF: puts\u2191r
; char *__cdecl strcpy(char *Destination, const char *Source)
                extrn __imp_strcpy:dword ; DATA XREF: strcpy\u2191r
; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
                extrn __imp_vfprintf:dword
                                        ; DATA XREF: vfprintf\u2191r


; Section 8. (virtual address 00008000)
; Virtual size                  : 00000018 (     24.)
; Section size in file          : 00000200 (    512.)
; Offset to raw data for section: 00002200
; Flags C0300040: Data Readable Writable
; Alignment     : 4 bytes
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_CRT            segment dword public 'DATA' use32
                assume cs:_CRT
                ;org 62508000h
                dd 0
TlsCallbacks    dd offset TlsCallback_0 ; DATA XREF: .tls:TlsCallbacks_ptr\u2193o
                dd offset TlsCallback_1
                dd 0
                dd 0
dword_62508014  dd 0                    ; DATA XREF: TlsCallback_0:loc_625014E3\u2191o
                                        ; TlsCallback_0+38\u2191o ...
                align 1000h
_CRT            ends

; Section 9. (virtual address 00009000)
; Virtual size                  : 00000020 (     32.)
; Section size in file          : 00000200 (    512.)
; Offset to raw data for section: 00002400
; Flags C0300040: Data Readable Writable
; Alignment     : 4 bytes
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_tls            segment dword public 'DATA' use32
                assume cs:_tls
                ;org 62509000h
                db 0
TlsStart        db 3 dup(0)             ; DATA XREF: .tls:TlsDirectory\u2193o
TlsDirectory    dd offset TlsStart
TlsEnd_ptr      dd offset TlsEnd
TlsIndex_ptr    dd offset TlsIndex
TlsCallbacks_ptr dd offset TlsCallbacks
TlsSizeOfZeroFill dd 0
TlsCharacteristics dd 0
TlsEnd          dd 79h dup(0)           ; DATA XREF: .tls:TlsEnd_ptr\u2191o
                align 1000h
_tls            ends


                end DllEntryPoint
